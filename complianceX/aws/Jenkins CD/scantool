pipeline {
agent any
environment {
AWS_ACCOUNT_ID="059516066038"
AWS_DEFAULT_REGION="us-east-1"
IMAGE_REPO_NAME="scantool"
IMAGE_TAG="${BUILD_NUMBER}"
GITHUB_URL='https://github.com/scaleops/ComplianceX-Compliance.git'
GITHUB_CRED_ID='GithubCreds'
REPOSITORY_URI = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${IMAGE_REPO_NAME}"
HELM_NAME="scantool"
}

stages {

stage('Logging into AWS ECR') {
steps {
script {
sh "\$(aws ecr get-login --region ${AWS_DEFAULT_REGION} --no-include-email)"
}

}
}

stage('Cloning Git') {
steps {
checkout([$class: 'GitSCM', branches: [[name: '*/dev']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: "${GITHUB_CRED_ID}", url: "${GITHUB_URL}"]]])
}
}

// Building Docker images
stage('Building image') {
steps{
script {
dockerImage = docker.build "${IMAGE_REPO_NAME}:${IMAGE_TAG}"
}
}
}

// Uploading Docker images into AWS ECR
stage('Pushing to ECR') {
steps{
script {
sh "docker tag ${IMAGE_REPO_NAME}:${IMAGE_TAG} ${REPOSITORY_URI}:$IMAGE_TAG"
sh "docker push ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${IMAGE_REPO_NAME}:${IMAGE_TAG}"
}
}
}

// Deployment scantool
stage('Deploying scantool') {
steps {
script {
withCredentials([kubeconfigFile(credentialsId: 'complianceX-kubernetes', variable: 'KUBECONFIG')]) {
sh '''/usr/local/bin/helm upgrade ${HELM_NAME} ./Helm --set image.tag=${IMAGE_TAG}'''
sh ''' docker rmi ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${IMAGE_REPO_NAME}:${IMAGE_TAG}'''
}
}
}
}
}
}